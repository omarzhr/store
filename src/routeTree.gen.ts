/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as publicIndexRouteImport } from './routes/(public)/index'
import { Route as publicProductsIndexRouteImport } from './routes/(public)/products/index'
import { Route as publicCheckoutIndexRouteImport } from './routes/(public)/checkout/index'
import { Route as publicCartIndexRouteImport } from './routes/(public)/cart/index'
import { Route as publicProductsProductSlugRouteImport } from './routes/(public)/products/$productSlug'

const publicIndexRoute = publicIndexRouteImport.update({
  id: '/(public)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicProductsIndexRoute = publicProductsIndexRouteImport.update({
  id: '/(public)/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicCheckoutIndexRoute = publicCheckoutIndexRouteImport.update({
  id: '/(public)/checkout/',
  path: '/checkout/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicCartIndexRoute = publicCartIndexRouteImport.update({
  id: '/(public)/cart/',
  path: '/cart/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicProductsProductSlugRoute =
  publicProductsProductSlugRouteImport.update({
    id: '/(public)/products/$productSlug',
    path: '/products/$productSlug',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/products/$productSlug': typeof publicProductsProductSlugRoute
  '/cart': typeof publicCartIndexRoute
  '/checkout': typeof publicCheckoutIndexRoute
  '/products': typeof publicProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof publicIndexRoute
  '/products/$productSlug': typeof publicProductsProductSlugRoute
  '/cart': typeof publicCartIndexRoute
  '/checkout': typeof publicCheckoutIndexRoute
  '/products': typeof publicProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(public)/': typeof publicIndexRoute
  '/(public)/products/$productSlug': typeof publicProductsProductSlugRoute
  '/(public)/cart/': typeof publicCartIndexRoute
  '/(public)/checkout/': typeof publicCheckoutIndexRoute
  '/(public)/products/': typeof publicProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/products/$productSlug'
    | '/cart'
    | '/checkout'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/products/$productSlug' | '/cart' | '/checkout' | '/products'
  id:
    | '__root__'
    | '/(public)/'
    | '/(public)/products/$productSlug'
    | '/(public)/cart/'
    | '/(public)/checkout/'
    | '/(public)/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  publicIndexRoute: typeof publicIndexRoute
  publicProductsProductSlugRoute: typeof publicProductsProductSlugRoute
  publicCartIndexRoute: typeof publicCartIndexRoute
  publicCheckoutIndexRoute: typeof publicCheckoutIndexRoute
  publicProductsIndexRoute: typeof publicProductsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/products/': {
      id: '/(public)/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof publicProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/checkout/': {
      id: '/(public)/checkout/'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof publicCheckoutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/cart/': {
      id: '/(public)/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof publicCartIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/products/$productSlug': {
      id: '/(public)/products/$productSlug'
      path: '/products/$productSlug'
      fullPath: '/products/$productSlug'
      preLoaderRoute: typeof publicProductsProductSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  publicIndexRoute: publicIndexRoute,
  publicProductsProductSlugRoute: publicProductsProductSlugRoute,
  publicCartIndexRoute: publicCartIndexRoute,
  publicCheckoutIndexRoute: publicCheckoutIndexRoute,
  publicProductsIndexRoute: publicProductsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
